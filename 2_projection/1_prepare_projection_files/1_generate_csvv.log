
  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   16.1   Copyright 1985-2019 StataCorp LLC
  Statistics/Data analysis            StataCorp
                                      4905 Lakeway Drive
     Special Edition                  College Station, Texas 77845 USA
                                      800-STATA-PC        https://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

Stata license: 745-user network, expiring 30 Jun 2022
Serial number: 501709313533
  Licensed to: Ruixue Li
               UChicago BFI

Notes:
      1. Stata is running in batch mode.
      2. Unicode is supported; see help unicode_advice.
      3. Maximum number of variables is set to 5,000; see help set_maxvar.

. do 1_generate_csvv.do 

. /*
> 
> Purpose: Create CSVV's required for projections  
> */
. 
. clear all

. set more off

. macro drop _all

. pause off

. global LOG: env LOG

. log using $LOG/2_projection/1_prepare_projection_files/1_generate_csvv.log, r
> eplace
-------------------------------------------------------------------------------
      name:  <unnamed>
       log:  /Users/ruixueli/Downloads/energy_data_release/LOG/2_projection/1_p
> repare_projection_files/1_generate_csvv.log
  log type:  text
 opened on:  11 Jan 2022, 04:46:42

. 
. * Download a command for dealing with matrices 
. qui net install http://www.stata.com/stb/stb56/dm79.pkg

. 
. //SET UP RELEVANT PATHS
. 
. global REPO: env REPO

. global DATA: env DATA 

. global OUTPUT: env OUTPUT 

. 
. // path to energy-code-release repo 
. global root "${REPO}/energy-code-release-2020"

. 
. //install global programs
. do $root/2_projection/0_packages_programs_inputs/projection_set_up/csvv_gener
> ation_stacked.do

. /*
> 
> Purpose: 
> 1. Produce CSVV files - ie convert the stata ster files containing regression
>  coefficients 
> into a format that our projection system understands
> 2. Produce full stacked vcv for delta method processing (combining impacts ac
> ross products to construct damages)
> 
> requires download of user written command matselrc: (can run net install http
> ://www.stata.com/stb/stb56/dm79.pkg)
> 
> */
.         
. *****************************************************************************
> ***
. 
. //Defining Programs
. 
. // get product index for regression coefficients based on product
. program define get_product_regression_index, rclass
  1. syntax , product(string)
  2. 
.         if "`product'"=="electricity" {
  3.                 local pg=1
  4. 
.         }
  5.         else if "`product'"=="other_energy" {
  6.                 local pg=2
  7.         }
  8. 
.         return scalar pg = `pg' 
  9. end

. 
. // return income group for decile and specification
. program define get_income_group, rclass
  1. syntax , model(string) grouping_test(string) product(string) bknum(string)
>  g(integer) 
  2. 
.         if (strpos("`model'", "TINV_clim") > 0) {
  3.                 if ( "`bknum'" == "break2" & "`product'" == "other_energy"
> ) {
  4. 
.                         if (`g'>=1) & (`g'<= 2) local lg = 1 
  5.                         if `g'>=3 & `g'<= 6  local lg = 2
  6.                         if `g'>=7 & `g'<= 10 local lg = 3 
  7. 
.                 }
  8.                 else if ("`bknum'" == "break2" & "`product'" == "electrici
> ty") {
  9.                         if (`g'>=1) & (`g'<=6) local lg = 1 
 10.                         if `g'==7 | `g'==8  local lg = 2
 11.                         if `g'==9 | `g'==10 local lg = 3 
 12.                 }
 13.                 else {
 14. 
.                         di "Must define income groups for `model' `grouping_t
> est' `bknum' `case' `IF' `product'!"
 15.                         assert inlist(`lg',1,2,3,4)
 16.                 }
 17. 
.                 if ("`grouping_test'" == "semi-parametric" & `lg' > 2) local 
> lg = 2 //
 18. 
.                 return scalar lg = `lg' 
 19.         }
 20.         else {
 21. 
.                 di "Must define income groups for `model' `grouping_test' `bk
> num' `case' `IF' `product'!"
 22.                 assert inlist(`lg',1,2,3,4)
 23. 
.         }
 24. end

. 
. // write csvv header for specifciation 
. program define write_csvv_header
  1. syntax , model(string) clim_data(string) spec_stem(string) product(string)
>  num_coefficients(integer) num_observations(integer) ma_inc(string)
  2. 
.         pause
  3.         file write csvv "---" _n
  4.         file write csvv "oneline: Energy IEA global splited CDD/HDD intera
> ction Model `model'" _n
  5.         file write csvv "version: ENERGY-GLOBAL-INTERACTION-`model'-`clim_
> data'" _n
  6.         file write csvv "dependencies: `spec_stem'_`model'`submodel_name'.
> ster" _n
  7.         file write csvv "description: Global regression on sector OTHERIND
> , source `product', poly 2, Model `model', Spec=FD_FGLS_inter, Climate Data= 
> `clim_data' . There are `num_coefficients' gamma reported in this CSVV in tot
> al. They can be equal across deciles depending on the model." _n
  8.         file write csvv "csvv-version: girdin-2017-01-10" _n
  9.         file write csvv "variables:" _n
 10.         file write csvv "  tas: Daily average temperature [C]"_n
 11.         file write csvv "  tas2: square daily average temperature [C^2]"_n
 12.         file write csvv "  tas-cdd-20: Max of daily average temperature mi
> nus 20C and zero [C]"_n
 13.         file write csvv "  tas-cdd-20-poly-2: Max of square daily average 
> temperature minus square 20C and zero [C^2]"_n
 14.         file write csvv "  tas-hdd-20: Max of 20C minus daily average temp
> erature and zero [C]"_n
 15.         file write csvv "  tas-hdd-20-poly-2: Max of square 20C minus squa
> re daily average temperature and zero [C^2]"_n
 16.         file write csvv "  incbinN: income bin 1-10 sorted by `ma_inc' log
>  GDP per cap, year 2000 dollars [NA]"_n
 17.         file write csvv "  climtas-cdd-20: MA15 average yearly CDD 20C [de
> gree-day]"_n 
 18.         file write csvv "  climtas-hdd-20: MA15 average yearly HDD 20C [de
> gree-day]"_n 
 19. 
.         file write csvv "  loggdppc-shifted: loggdppc - ibar [log(2005 PPP ad
> justed USD)]" _n
 20.         file write csvv "  loggdppc: `ma_inc' average log GDP per capita [
> log(2005 PPP adjusted USD)]"_n
 21. 
.         file write csvv "  outcome: energy use per capita [kWh/pc]"_n        
>   
 22.         file write csvv "..." _n
 23. 
.         file write csvv "observations"_n
 24.         file write csvv " `num_observations'" _n
 25. end

. 
. // write out names of climate variables
. program define write_climvar_header 
  1. syntax , model(string)
  2.         
.         file write csvv "prednames"_n
  3.         
.         //10 decile groups
.         
.         *part 1: betas
.         file write csvv "tas, tas2, "
  4.         file write csvv "tas, tas2, "
  5.         file write csvv "tas, tas2, "
  6.         file write csvv "tas, tas2, "
  7.         file write csvv "tas, tas2, "
  8.         file write csvv "tas, tas2, "
  9.         file write csvv "tas, tas2, "
 10.         file write csvv "tas, tas2, "
 11.         file write csvv "tas, tas2, "
 12.         file write csvv "tas, tas2, "
 13.         
.         *part 1.5: interacted betas
.         if (strpos("`model'","lininter") > 0) {
 14.                 
.                 file write csvv "tas, tas2, "
 15.                 file write csvv "tas, tas2, "
 16.                 file write csvv "tas, tas2, "
 17.                 file write csvv "tas, tas2, "
 18.                 file write csvv "tas, tas2, "
 19.                 file write csvv "tas, tas2, "
 20.                 file write csvv "tas, tas2, "
 21.                 file write csvv "tas, tas2, "
 22.                 file write csvv "tas, tas2, "
 23.                 file write csvv "tas, tas2, "
 24.         }
 25.         *Part 2: gammas, CDD
.         file write csvv "tas-cdd-20, tas-cdd-20-poly-2, "
 26.         file write csvv "tas-cdd-20, tas-cdd-20-poly-2, "
 27.         file write csvv "tas-cdd-20, tas-cdd-20-poly-2, "
 28.         file write csvv "tas-cdd-20, tas-cdd-20-poly-2, "
 29.         file write csvv "tas-cdd-20, tas-cdd-20-poly-2, "
 30.         file write csvv "tas-cdd-20, tas-cdd-20-poly-2, "
 31.         file write csvv "tas-cdd-20, tas-cdd-20-poly-2, "
 32.         file write csvv "tas-cdd-20, tas-cdd-20-poly-2, "
 33.         file write csvv "tas-cdd-20, tas-cdd-20-poly-2, "
 34.         file write csvv "tas-cdd-20, tas-cdd-20-poly-2, "
 35.         
.         *part 3: gammas, HDD
.         file write csvv "tas-hdd-20, tas-hdd-20-poly-2, "
 36.         file write csvv "tas-hdd-20, tas-hdd-20-poly-2, "
 37.         file write csvv "tas-hdd-20, tas-hdd-20-poly-2, "
 38.         file write csvv "tas-hdd-20, tas-hdd-20-poly-2, "
 39.         file write csvv "tas-hdd-20, tas-hdd-20-poly-2, "
 40.         file write csvv "tas-hdd-20, tas-hdd-20-poly-2, "
 41.         file write csvv "tas-hdd-20, tas-hdd-20-poly-2, "
 42.         file write csvv "tas-hdd-20, tas-hdd-20-poly-2, "
 43.         file write csvv "tas-hdd-20, tas-hdd-20-poly-2, "
 44.         file write csvv "tas-hdd-20, tas-hdd-20-poly-2"
 45.         
.         **Part 3.5: gammas, lgdppc**
.         
.         file write csvv ","
 46.         file write csvv "tas, tas2, "
 47.         file write csvv "tas, tas2, "
 48.         file write csvv "tas, tas2, "
 49.         file write csvv "tas, tas2, "
 50.         file write csvv "tas, tas2, "
 51.         file write csvv "tas, tas2, "
 52.         file write csvv "tas, tas2, "
 53.         file write csvv "tas, tas2, "
 54.         file write csvv "tas, tas2, "
 55.         file write csvv "tas, tas2"
 56.         
. 
.         **Part 4: gammas, lgdppc**
.         
.         if (strpos("`model'","lininter") > 0) {
 57.                 file write csvv ","
 58.                 file write csvv "tas, tas2, "
 59.                 file write csvv "tas, tas2, "
 60.                 file write csvv "tas, tas2, "
 61.                 file write csvv "tas, tas2, "
 62.                 file write csvv "tas, tas2, "
 63.                 file write csvv "tas, tas2, "
 64.                 file write csvv "tas, tas2, "
 65.                 file write csvv "tas, tas2, "
 66.                 file write csvv "tas, tas2, "
 67.                 file write csvv "tas, tas2"
 68.         }
 69.         
.         file write csvv _n
 70. end

. 
. // write out names of covariate variables
. program define write_covar_header 
  1. syntax , model(string)
  2. 
.         //Cov: 10 groups
. 
.         file write csvv "covarnames"_n
  3. 
.         *part 1: betas
.         file write csvv "incbin1, incbin1, "
  4.         file write csvv "incbin2, incbin2, "
  5.         file write csvv "incbin3, incbin3, "
  6.         file write csvv "incbin4, incbin4, "
  7.         file write csvv "incbin5, incbin5, "
  8.         file write csvv "incbin6, incbin6, "
  9.         file write csvv "incbin7, incbin7, "
 10.         file write csvv "incbin8, incbin8, "
 11.         file write csvv "incbin9, incbin9, "
 12.         file write csvv "incbin10, incbin10, "
 13. 
.         *part 1.5: interacted betas
.         if (strpos("`model'`submodel_name'","lininter") > 0) {
 14.                 file write csvv "year*incbin1, year*incbin1, "
 15.                 file write csvv "year*incbin2, year*incbin2, "
 16.                 file write csvv "year*incbin3, year*incbin3, "
 17.                 file write csvv "year*incbin4, year*incbin4, "
 18.                 file write csvv "year*incbin5, year*incbin5, "
 19.                 file write csvv "year*incbin6, year*incbin6, "
 20.                 file write csvv "year*incbin7, year*incbin7, "
 21.                 file write csvv "year*incbin8, year*incbin8, "
 22.                 file write csvv "year*incbin9, year*incbin9, "
 23.                 file write csvv "year*incbin10, year*incbin10, "
 24.         }
 25. 
.         *part 2: gammas, CDD
.         file write csvv "climtas-cdd-20*incbin1, climtas-cdd-20*incbin1, "
 26.         file write csvv "climtas-cdd-20*incbin2, climtas-cdd-20*incbin2, "
 27.         file write csvv "climtas-cdd-20*incbin3, climtas-cdd-20*incbin3, "
 28.         file write csvv "climtas-cdd-20*incbin4, climtas-cdd-20*incbin4, "
 29.         file write csvv "climtas-cdd-20*incbin5, climtas-cdd-20*incbin5, "
 30.         file write csvv "climtas-cdd-20*incbin6, climtas-cdd-20*incbin6, "
 31.         file write csvv "climtas-cdd-20*incbin7, climtas-cdd-20*incbin7, "
 32.         file write csvv "climtas-cdd-20*incbin8, climtas-cdd-20*incbin8, "
 33.         file write csvv "climtas-cdd-20*incbin9, climtas-cdd-20*incbin9, "
 34.         file write csvv "climtas-cdd-20*incbin10, climtas-cdd-20*incbin10,
>  "
 35. 
.         *part 3: gammas, HDD
.         file write csvv "climtas-hdd-20*incbin1, climtas-hdd-20*incbin1, "
 36.         file write csvv "climtas-hdd-20*incbin2, climtas-hdd-20*incbin2, "
 37.         file write csvv "climtas-hdd-20*incbin3, climtas-hdd-20*incbin3, "
 38.         file write csvv "climtas-hdd-20*incbin4, climtas-hdd-20*incbin4, "
 39.         file write csvv "climtas-hdd-20*incbin5, climtas-hdd-20*incbin5, "
 40.         file write csvv "climtas-hdd-20*incbin6, climtas-hdd-20*incbin6, "
 41.         file write csvv "climtas-hdd-20*incbin7, climtas-hdd-20*incbin7, "
 42.         file write csvv "climtas-hdd-20*incbin8, climtas-hdd-20*incbin8, "
 43.         file write csvv "climtas-hdd-20*incbin9, climtas-hdd-20*incbin9, "
 44.         file write csvv "climtas-hdd-20*incbin10, climtas-hdd-20*incbin10"
 45. 
.         *part 3.5: thrice interacted gammas
.         if (strpos("`model'`submodel_name'","lininter") > 0) {
 46.                 file write csvv "," 
 47.                 file write csvv "loggdppc-shifted*year*incbin1, loggdppc-s
> hifted*year*incbin1, "
 48.                 file write csvv "loggdppc-shifted*year*incbin2, loggdppc-s
> hifted*year*incbin2, "
 49.                 file write csvv "loggdppc-shifted*year*incbin3, loggdppc-s
> hifted*year*incbin3, "
 50.                 file write csvv "loggdppc-shifted*year*incbin4, loggdppc-s
> hifted*year*incbin4, "
 51.                 file write csvv "loggdppc-shifted*year*incbin5, loggdppc-s
> hifted*year*incbin5, "
 52.                 file write csvv "loggdppc-shifted*year*incbin6, loggdppc-s
> hifted*year*incbin6, "
 53.                 file write csvv "loggdppc-shifted*year*incbin7, loggdppc-s
> hifted*year*incbin7, "
 54.                 file write csvv "loggdppc-shifted*year*incbin8, loggdppc-s
> hifted*year*incbin8, "
 55.                 file write csvv "loggdppc-shifted*year*incbin9, loggdppc-s
> hifted*year*incbin9, "
 56.                 file write csvv "loggdppc-shifted*year*incbin10, loggdppc-
> shifted*year*incbin10 "
 57.         }
 58. 
.         **Part 4: gammas, lgdppc**
. 
.         file write csvv ","
 59.         file write csvv "loggdppc-shifted*incbin1, loggdppc-shifted*incbin
> 1, "
 60.         file write csvv "loggdppc-shifted*incbin2, loggdppc-shifted*incbin
> 2, "
 61.         file write csvv "loggdppc-shifted*incbin3, loggdppc-shifted*incbin
> 3, "
 62.         file write csvv "loggdppc-shifted*incbin4, loggdppc-shifted*incbin
> 4, "
 63.         file write csvv "loggdppc-shifted*incbin5, loggdppc-shifted*incbin
> 5, "
 64.         file write csvv "loggdppc-shifted*incbin6, loggdppc-shifted*incbin
> 6, "
 65.         file write csvv "loggdppc-shifted*incbin7, loggdppc-shifted*incbin
> 7, "
 66.         file write csvv "loggdppc-shifted*incbin8, loggdppc-shifted*incbin
> 8, "
 67.         file write csvv "loggdppc-shifted*incbin9, loggdppc-shifted*incbin
> 9, "
 68.         file write csvv "loggdppc-shifted*incbin10, loggdppc-shifted*incbi
> n10"
 69.         
.         file write csvv _n
 70. end

. 
. // write out gammas (coefficient values) for a given coefficient name given t
> he model specification and product
. // returns coefficient list 
. program define write_gammas, sclass
  1. syntax , model(string) grouping_test(string) clim_data(string) product(str
> ing) bknum(string) [ coef_term(string) ] coefficientlist(string) last_coef_te
> rm(string)
  2.         
.         assert inlist("`last_coef_term'", "TRUE", "FALSE")
  3.         
.         forval g=1/10 {
  4.                 
.                 if (substr("`coef_term'", -1, 1) == "I") {                   
>            
  5.                         get_income_group, model("`model'") grouping_test("
> `grouping_test'") product("`product'") bknum("`bknum'") g(`g')
  6.                         local lg = `r(lg)'
  7.                         return clear
  8.                 }
  9.                 else {
 10.                         local lg = ""
 11.                 }
 12. 
.                 get_product_regression_index, product("`product'")
 13.                 local pg = `r(pg)'
 14.                 return clear
 15. 
.                 local coefstub "c.indp`pg'#c.indf1#c.FD_`coef_term'`lg'temp"
 16.                 
.                 forval k=1/2 {
 17.                         
.                         local coef_name "`coefstub'`k'_`clim_data'"
 18.                         
.                         cap local beta = _b[`coef_name'] 
 19.                         
.                         // make up for inconsistent naming -- reason for inco
> nsistent naming is local character length got too long when _GMFD attached at
>  the end
.                         if _rc == 111 | _rc == 198 {
 20.                                 local coef_name "`coefstub'`k'"
 21.                                 local beta = _b[`coef_name']
 22.                         } 
 23. 
.                         local coefficientlist = "`coefficientlist' `coef_name
> '"
 24.                         file write csvv " `beta'"
 25.                         
.                         if (`g' == 10 & `k' == 2 & "`last_coef_term'" == "TRU
> E") {
 26.                                 file write csvv "" _n
 27.                         }
 28.                         else {
 29.                                 file write csvv ","
 30.                         }
 31.                 }       
 32.         }
 33. 
.         sreturn local coef_list "`coefficientlist'"
 34. end

. 
. // write out variance covariance matrix 
. // inputs coefficientlist output from write_gammas -- list of coefficients in
>  order written 
. program define write_vcv
  1. syntax , coefficientlist(string) num_coefficients(integer)
  2. 
.         *TO-DO: remove this for the .csv file
.         file write csvv "gammavcv" _n
  3.                                 
.         foreach coef_row in `coefficientlist' {
  4.                 
.                 //keep track of which coefficient writing in row, specificall
> y keeping track of when writing last coefficient in each row
.                 local vcv_counter = 0
  5. 
.                 foreach coef_col in `coefficientlist' {
  6.                         
.                         //get covariance (this is inefficient )
.                         matselrc e(V) VCV, row(`coef_row') col(`coef_col')   
>    
  7.                         local vcv = el(VCV, 1, 1)
  8.                         file write csvv "`vcv'"
  9.                         
.                         //write new line or comma depending on where you are 
> in loop
.                         local vcv_counter = `vcv_counter' + 1 
 10. 
.                         if (`vcv_counter' < `num_coefficients') {
 11.                                 file write csvv ","
 12.                         }
 13.                         else if (`vcv_counter' == `num_coefficients') {
 14.                                 file write csvv "" _n
 15.                         }
 16.                         else {
 17.                                 di "I didn't fall into either category, ie
>  there was a hiccup!!!!!! counter: `num_coefficients' vcv counter: `vcv_count
> er'"
 18.                                 assert(1 == 0)
 19.                         }
 20.                 }
 21.         }       
 22. end

. 
. // load spec csv
. 
. program define load_spec_csv, rclass
  1. syntax , specpath(string) model(string)
  2.         
.         // load data and clean for desired model
.         import delimited using `specpath'/projection_specifications.csv, varn
> ames(1) clear
  3.         pause
  4.         keep if model_name == "`model'"
  5.         
.         // count number of coefficients for that model
.         count
  6.         local num_coefficients = `r(N)'
  7. 
.         return scalar nc = `num_coefficients'   
  8. end

. 
. // write csvv
. program define write_csvv, sclass
  1. syntax , datapath(string) outpath(string) root(string) model(string) clim_
> data(string) spec_stem(string) grouping_test(string) product(string) bknum(st
> ring) zero_case(string) issue_case(string) data_type(string)
  2.         
.         /////////////////////////////////////////////////////////////////////
> /////////////////////////////////////////////////////
>         
.         // part a.1: create locals for dataset and ster file
.         local data "`datapath'/`clim_data'_TINV_clim_regsort.dta"
  3.         local ster "`root'/sters/`spec_stem'_`model'.ster"
  4.         
.         // part a.2: insheet projection spec csv and write list of coefficien
> ts 
.         
.         load_spec_csv , specpath("`root'/2_projection/0_packages_programs_inp
> uts/projection_set_up") model("`model'")
  5.         local num_coefficients = `r(nc)'
  6.         return clear
  7. 
.         local coef_term_list ""
  8. 
.         forvalues nn = 1(1)`num_coefficients' {
  9.                 local coef_add = coefficient_names[`nn']
 10.                 local coef_term_list = "`coef_term_list' `coef_add'"
 11.         }
 12. 
.         di "coefficient list retrieved: `coef_term_list'"
 13. 
.         // each coefficient has 10 income deciles and 2 poly orders 
.         local num_coefficients = `num_coefficients' * 20
 14. 
.         /////////////////////////////////////////////////////////////////////
> //////////////////////////////////////////////////////
> 
.         // part b: load ster file and store relevant information 
.         use "`data'", clear 
 15.         estimate use "`ster'"
 16.         ereturn display
 17.         
.         estimates describe using "`ster'"
 18.         local num_observations = `e(N)'
 19.         local residualvcv = `e(rmse)' * `e(rmse)' 
 20. 
.         /////////////////////////////////////////////////////////////////////
> ///////////////////////////////////////////////////////
>         
.         // part c: initiate csvv file for writing
.         local output "`outpath'/`model'"
 21.         local csvv "`output'/`spec_stem'_OTHERIND_`product'_`model'.csvv"
 22.         
.         cap mkdir "`output'"
 23.         file open csvv using "`csvv'", write replace
 24. 
.         di "csvv initiated: `csvv'"
 25. 
.         /////////////////////////////////////////////////////////////////////
> ///////////////////////////////////////////////////////////
>         
.         // part d: write headers
. 
.         di "Writing csvv header..."
 26.         di "`model'"
 27.         pause
 28.         write_csvv_header , model("`model'") clim_data("`clim_data'") spec
> _stem("`spec_stem'") product("`product'") num_coefficients(`num_coefficients'
> ) num_observations(`num_observations') ma_inc("MA15")
 29. 
.         di "Writing climate variables..."
 30.         write_climvar_header , model("`model'")
 31. 
.         di "Writing covariates..."
 32.         write_covar_header , model("`model'")
 33.         
.         /////////////////////////////////////////////////////////////////////
> ///////////////////////////////////////////////////////////
>         
.         // part e: write coefficients
. 
.         di "Writing gammas..."
 34. 
.         file write csvv "gamma" _n
 35.         local coefficientlist = " " //create list with each coefficient st
> ored in csvv
 36.         local counter = 0
 37.         local last_coef_term "FALSE"
 38. 
.         foreach coef_term in "" `coef_term_list' {
 39. 
.                 di "Writing coef term: `coef_term'..."
 40.                 
.                 local counter = `counter' + 20
 41.                 
.                 if `num_coefficients' == `counter' local last_coef_term "TRUE
> "
 42. 
.                 write_gammas , model("`model'") grouping_test("`grouping_test
> '") clim_data("`clim_data'") product("`product'") bknum("`bknum'") coef_term(
> "`coef_term'") coefficientlist("`coefficientlist'") last_coef_term("`last_coe
> f_term'")
 43.                 
.                 local coefficientlist `s(coef_list)' 
 44.                 return clear
 45.         }
 46.         
.         /////////////////////////////////////////////////////////////////////
> /////////////////////////////////////////////////////////////
> 
.         // part f: write gamma vcv
.         // note this could be seriously sped up -- if anyone is interested in
>  improving by all meands
. 
.         di "Writing vcv..."
 47.         
.         write_vcv , coefficientlist("`coefficientlist'") num_coefficients(`nu
> m_coefficients')
 48. 
.         /////////////////////////////////////////////////////////////////////
> /////////////////////////////////////////////////////////////////
> 
.         // part g: close csvv after adding in residualvcv
. 
.         file write csvv "residvcv" _n
 49.         file write csvv "`residualvcv'" _n
 50.                                 
.         file close csvv
 51. 
.         /////////////////////////////////////////////////////////////////////
> /////////////////////////////////////////////////////////////////
> 
.         sreturn local coef_list "`coefficientlist'"
 52. end

. 
. 
. 
end of do-file

. 
. 
. ************************************************
. *Step 1: Set up common resources across models
. ************************************************
. 
. // ster stem for desired projection  
. local ster_stem = "FD_FGLS_inter"

. 
. // path to analysis data 
. local DATA "$DATA"

. 
. // path to csvv output
. local output_csvv "$root/projection_inputs/csvv"

. cap mkdir "`output_csvv'"

. 
. // path to dataset with information about income deciles and income spline kn
> ot location
. local break_data "$DATA/regression/break_data_TINV_clim.dta"

. 
. * Loop over model type - creating csvvs for each type. 
. * Note TINV_clim_lininter_double and TINV_clim_lininter_half are exactly the 
> same csvv as TINV_clim_lininter
. * Hence we copy the csvv made for TINV_clim_lininter
. * 
. foreach model_tt in "TINV_clim" "TINV_clim_lininter" "TINV_clim_lininter_doub
> le" "TINV_clim_lininter_half" {
  2.         
.         di "`model_tt'"
  3.         if(inlist("`model_tt'", "TINV_clim", "TINV_clim_lininter")){
  4. 
.                 ***************************************************
.                 *Step 2: Generate CSVV
.                 ***************************************************
. 
.                 // step 1: write csvvs
. 
.                 foreach product in "other_energy" "electricity" {
  5. 
.                         write_csvv , datapath("`DATA'/regression/")     outpa
> th("`output_csvv'") root("$root") ///
>                                 model("`model_tt'") clim_data("GMFD") spec_st
> em("`ster_stem'") ///
>                                 grouping_test("semi-parametric") product("`pr
> oduct'") bknum("break2") ///
>                                 zero_case("Exclude") issue_case("_all-issues"
> ) data_type("replicated_data")     
  6.                         
.                         local coefficientlist_`product' `s(coef_list)'
  7. 
.                 }
  8. 
.                 // step 2: write stacked regression full vcv 
. 
.                 //get number of coefficients
.                 preserve
  9. 
.                         load_spec_csv , specpath("$root/2_projection/0_packag
> es_programs_inputs/projection_set_up") model("`model_tt'")
 10.                         local num_coefficients = `r(nc)'
 11.                         local all_coefficients = 2 * `num_coefficients' * 
> 20 // 2 poly order, 10 income deciles, 2 products
 12.                         return clear
 13. 
.                 restore
 14. 
.                 //write file full vcv. This is combined for electricity and o
> ther_energy
.                 file open csvv using "`output_csvv'/`model_tt'/`ster_stem'_OT
> HERIND_`model_tt'.csv", write replace
 15.                 write_vcv , ///
>                         coefficientlist(" `coefficientlist_other_energy' `coe
> fficientlist_electricity' ") ///
>                          num_coefficients(`all_coefficients')
 16.                 di "test"
 17.                 file close csvv
 18.         }
 19.         else if("`model_tt'" == "TINV_clim_lininter_double"){
 20. 
.                 cap mkdir "`output_csvv'/TINV_clim_lininter_double"
 21.                 foreach product in "_other_energy" "_electricity"{
 22.                         copy "`output_csvv'/TINV_clim_lininter/FD_FGLS_int
> er_OTHERIND`product'_TINV_clim_lininter.csvv" ///
>                                 "`output_csvv'/TINV_clim_lininter_double/FD_F
> GLS_inter_OTHERIND`product'_TINV_clim_lininter_double.csvv", replace 
 23.                 }
 24.                 copy "`output_csvv'/TINV_clim_lininter/FD_FGLS_inter_OTHER
> IND_TINV_clim_lininter.csv" ///
>                 "`output_csvv'/TINV_clim_lininter_double/FD_FGLS_inter_OTHERI
> ND_TINV_clim_lininter_double.csv", replace 
 25.         }
 26.         else if("`model_tt'" == "TINV_clim_lininter_half"){
 27.                 cap mkdir "`output_csvv'/TINV_clim_lininter_half"
 28.                 foreach product in "_other_energy" "_electricity"{
 29.                         copy "`output_csvv'/TINV_clim_lininter/FD_FGLS_int
> er_OTHERIND`product'_TINV_clim_lininter.csvv" ///
>                                 "`output_csvv'/TINV_clim_lininter_half/FD_FGL
> S_inter_OTHERIND`product'_TINV_clim_lininter_half.csvv", replace 
 30.                 }
 31.                 copy "`output_csvv'/TINV_clim_lininter/FD_FGLS_inter_OTHER
> IND_TINV_clim_lininter.csv" ///
>                         "`output_csvv'/TINV_clim_lininter_half/FD_FGLS_inter_
> OTHERIND_TINV_clim_lininter_half.csv", replace 
 32.         }
 33. }
TINV_clim
(2 vars, 10 obs)
(6 observations deleted)
  4
coefficient list retrieved:   cdd20_TINV hdd20_TINV dc1_lgdppc_MA15I
file /Users/ruixueli/Downloads/repos//energy-code-release-2020/sters/FD_FGLS_in
> ter_TINV_clim.ster not found
r(601);

end of do-file
r(601);
