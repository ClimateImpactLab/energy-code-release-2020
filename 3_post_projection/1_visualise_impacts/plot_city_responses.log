
  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   16.1   Copyright 1985-2019 StataCorp LLC
  Statistics/Data analysis            StataCorp
                                      4905 Lakeway Drive
     Special Edition                  College Station, Texas 77845 USA
                                      800-STATA-PC        https://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

Stata license: 745-user network, expiring 30 Jun 2022
Serial number: 501709313533
  Licensed to: Ruixue Li
               UChicago BFI

Notes:
      1. Stata is running in batch mode.
      2. Unicode is supported; see help unicode_advice.
      3. Maximum number of variables is set to 5,000; see help set_maxvar.

. do "plot_city_responses.do" 

. /*
> 
> Purpose: Plot response functions for 2015 and 2099 overlaid, for Stockholm an
> d Guangxzhou
> done sep 2020
> */
. 
. clear all

. set more off

. set scheme s1color

. local clim_data "GMFD"

. 
. //SET UP RELEVANT PATHS
. 
. global REPO: env REPO

. global DATA: env DATA 

. global OUTPUT: env OUTPUT 

. 
. global LOG: env LOG

. log using $LOG/3_post_projection/1_visualise_impacts/plot_city_responses.log,
>  replace
(note: file /Users/ruixueli/Downloads/energy_data_release/LOG/3_post_projection
> /1_visualise_impacts/plot_city_responses.log not found)
-------------------------------------------------------------------------------
      name:  <unnamed>
       log:  /Users/ruixueli/Downloads/energy_data_release/LOG/3_post_projectio
> n/1_visualise_impacts/plot_city_responses.log
  log type:  text
 opened on:  18 Oct 2021, 22:29:21

. 
. 
. glob root "${REPO}/energy-code-release-2020"

. loc output "$OUTPUT/figures"

. 
. 
. *****************************************************************************
> ******
. *Step 1: Load in city information and save as tempfile for plotting purposes 
> later
. *****************************************************************************
> ******
. 
. //Part A: save income and climate covariate data as tempfile
. 
. import delim using "${DATA}/miscellaneous/stockholm_guangzhou_covariates_2015
> _2099.csv"
(8 vars, 14 obs)

. tempfile covar_data

. save `covar_data', replace
(note: file /var/folders/v3/5905wccj42z360z1jjg1lc5c0000gn/T//St76004.000001 no
> t found)
file /var/folders/v3/5905wccj42z360z1jjg1lc5c0000gn/T//St76004.000001 saved

. 
. //Part B: Load in daily tavg distribution min and max for 2015
. import delim using "${DATA}//miscellaneous/stockholm_guangzhou_2015_min_max.c
> sv", clear 
(5 vars, 2 obs)

. rename mint minT

. rename maxt maxT

. keep city maxT minT

. tempfile minmax

. qui save `minmax', replace

. 
. 
. //Part B: Sort city-years into climate and income groups using insample clima
> te and income group cutoffs
. 
. // i) load in insample climate and income group cutoffs
. use "${DATA}/regression/break_data_TINV_clim.dta", clear

. 
. // Get income group knot locations
. foreach var in "electricity" "other_energy" {
  2.         summ maxInc_largegpid_`var' if largegpid_`var' == 1
  3.         local ibar_`var' = `r(max)'
  4.         di "`ibar_`var''"
  5. }

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
maxInc_la~ty |      2,807     9.08701           0    9.08701    9.08701
9.087010383605957

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
maxInc_la~gy |        936    7.712954           0   7.712954   7.712954
7.712954044342041

. 
. // ii) extract covariates 
. import delim using "${DATA}/miscellaneous/stockholm_guangzhou_region_names_ke
> y.csv", clear varnames(1)
(4 vars, 7 obs)

. 
. //load in covariates
. foreach yr of num 2099 2015 {
  2.         merge 1:m region using "`covar_data'", nogen assert(3)
  3.         qui keep if year == `yr'
  4.         reshape wide loggdppc climtascdd20 climtashdd20, i(city proposal c
> ountry region) j(year) 
  5. }

    Result                           # of obs.
    -----------------------------------------
    not matched                             0
    matched                                14  
    -----------------------------------------
(note: j = 2099)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                        7   ->       7
Number of variables                   8   ->       7
j variable (1 values)              year   ->   (dropped)
xij variables:
                               loggdppc   ->   loggdppc2099
                           climtascdd20   ->   climtascdd202099
                           climtashdd20   ->   climtashdd202099
-----------------------------------------------------------------------------

    Result                           # of obs.
    -----------------------------------------
    not matched                             0
    matched                                14  
    -----------------------------------------
(note: j = 2015)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                        7   ->       7
Number of variables                  11   ->      10
j variable (1 values)              year   ->   (dropped)
xij variables:
                               loggdppc   ->   loggdppc2015
                           climtascdd20   ->   climtascdd202015
                           climtashdd20   ->   climtashdd202015
-----------------------------------------------------------------------------

. // Take an average across the impact regions that make up each city 
. qui collapse (mean) loggdppc* climtascdd* climtashdd* , by(city proposal coun
> try)

. 
. // iv) assign groups using i and ii
. foreach yr in 2099 2015 {
  2.         di "`yr'"
  3. 
.         foreach var in "electricity" "other_energy" {
  4.                 qui gen lg_`var'`yr' = .
  5.                 qui replace lg_`var'`yr'=1 if loggdppc`yr'<= `ibar_`var''
  6.                 qui replace lg_`var'`yr'=2 if loggdppc`yr'>`ibar_`var''
  7.                 assert lg_`var'`yr' != .
  8.         }
  9. }
2099
2015

. 
. // Part B) Merge City Info datasets and save as tempfile for later use
. qui merge 1:1 city using `minmax', nogen assert(3)

. tempfile cities

. save `cities', replace
(note: file /var/folders/v3/5905wccj42z360z1jjg1lc5c0000gn/T//St76004.000003 no
> t found)
file /var/folders/v3/5905wccj42z360z1jjg1lc5c0000gn/T//St76004.000003 saved

. 
. *****************************************************************************
> *********
. *Step 2: Prepare for plotting
. *****************************************************************************
> *********
. 
. //load analysis data 
. use "${DATA}/regression/GMFD_TINV_clim_regsort.dta", clear

. 
. //set local values for plotting
. *temp bounds
. local min = -15

. local max = 40

. local omit = 20

. local obs = `max' + abs(`min') + 1

. local midcut=20

. 
. *climate group colors
. local Hotcol "cranberry"

. local Coldcol "midblue"

. 
. //prepare dataset for plotting 
. 
. qui drop if _n > 0

. qui set obs `obs'

. qui replace temp1_`clim_data' = _n + `min' -1

. 
. //above 20 indicator
. qui gen above`midcut'=(temp1_`clim_data'>=`midcut')

. //below 20 indicator 
. qui gen below`midcut'=(temp1_`clim_data'<`midcut') 

. foreach k of num 1/2 {
  2.         rename temp`k'_`clim_data' temp`k'
  3.         replace temp`k' = temp1 ^ `k'
  4. }
(0 real changes made)
(56 real changes made)

. 
. *****************************************************************************
> *********
. *Step 3: Plot 
. *****************************************************************************
> *********
. 
. foreach var in "electricity" "other_energy" {
  2. 
.         if "`var'"=="electricity" {
  3.                 local stit="Electricity"
  4.                 local pg=1
  5.         }
  6.         else if "`var'"=="other_energy" {
  7.                 local stit="Other Fuels"
  8.                 local pg=2
  9.         }
 10. 
.         local plotgraph ""
 11. 
.         foreach city in "Stockholm" "Guangzhou"  {
 12.                 if("`city'" == "Guangzhou") {
 13.                         loc climtag "Hot"
 14.                 }
 15.                 else if("`city'" == "Stockholm") {
 16.                         loc climtag "Cold"
 17.                 }
 18. 
.                 //locals for plotting options
.                 local plotline = ""
 19.                 local gray_scale 8 
 20.                 local intensity_scale 40 
 21. 
.                 foreach scen in "noadapt" "fulladapt"  {
 22.                         
.                         //extract city specific info                    
.                         if "`scen'" == "fulladapt" {
 23.                                 local clim_yr 2099
 24.                                 local inc_yr 2099
 25.                         }
 26.                         else if "`scen'" == "noadapt" {
 27.                                 local clim_yr 2015
 28.                                 local inc_yr 2015
 29.                         }
 30. 
.                         preserve
 31.                                 qui use `cities', clear
 32.                                 keep if city == "`city'"
 33.                                 local country= country[1]
 34.                                 local subInc=loggdppc`inc_yr'[1]
 35.                                 local subCDD=climtascdd20`clim_yr'[1]
 36.                                 local subHDD=climtashdd20`clim_yr'[1]
 37.                                 local ig=lg_`var'`inc_yr'[1]
 38.                                 local mincut=minT[1]
 39.                                 local maxcut=maxT[1]
 40.                                 local deltacut_subInc= `subInc' - `ibar_`v
> ar''
 41.                         restore
 42. 
.                         local line ""
 43.                         local add ""
 44.                         
.                         foreach k of num 1/2 {
 45.                                 
.                                 local line = " `line' `add' _b[c.indp`pg'#c.i
> ndf1#c.FD_temp`k'_GMFD] * (temp`k' - 20^`k')"
 46.                                 local line = "`line' + above20*_b[c.indp`p
> g'#c.indf1#c.FD_cdd20_TINVtemp`k'_GMFD]*`subCDD' * (temp`k' - 20^`k')"
 47.                                 local line = "`line' + below20*_b[c.indp`p
> g'#c.indf1#c.FD_hdd20_TINVtemp`k'_GMFD]*`subHDD' * (20^`k' - temp`k')"
 48.                                 local line = "`line' + _b[c.indp`pg'#c.ind
> f1#c.FD_dc1_lgdppc_MA15I`ig'temp`k']*`deltacut_subInc'*(temp`k' - 20^`k')"
 49. 
.                                 local add " + "
 50.                         }
 51.                         * Load in ster file, to get response function coef
> ficients
.                         estimates use "$OUTPUT/sters/FD_FGLS_inter_TINV_clim.
> ster"
 52. 
.                         * Get predicted values, and SEs
.                         predictnl yhat_`var'`scen' = `line', se(se_`var'`scen
> ') ci(lower_`var'`scen' upper_`var'`scen')
 53.                         qui gen double yhat_full_`var'`scen' = yhat_`var'`
> scen'
 54.                         
.                         qui replace yhat_`var'`scen'=. if (temp1<`mincut' | t
> emp1>`maxcut')
 55. 
.                         * For 2015 response (ie noadapt), we include standard
>  errors on the plot
. 
.                         if ("`scen'" == "noadapt") {
 56.                                 ** Local line
.                                 local plotline="`plotline' (line yhat_full_`v
> ar'`scen' temp1, lcolor(``climtag'col') lwidth(0.5) lpattern(shortdash)) "
 57.                                 local plotline="`plotline' (line yhat_`var
> '`scen' temp1, lcolor(``climtag'col') lwidth(0.5))"
 58.                                 local plotline="`plotline' (rarea upper_`v
> ar'`scen' lower_`var'`scen' temp1, col(``climtag'col'%30)) "
 59.                         } 
 60.                         else {
 61.                                 local col = "gs`gray_scale' % `intensity_s
> cale'"
 62.                                 local gray_scale = `gray_scale' + 4
 63.                                 local intensity_scale = `intensity_scale' 
> - 20
 64. 
.                                 ** Local line
.                                 local plotline="`plotline' (line yhat_full_`v
> ar'`scen' temp1, lcolor(`col') lwidth(0.5) lpattern(shortdash)) "
 65.                                 local plotline="`plotline' (line yhat_`var
> '`scen' temp1, lcolor(`col') lwidth(0.5))"
 66.                         }
 67.                 }
 68.                 twoway `plotline', ///
>                                 yline(0) xlabel(`min'(5)`max', labsize(vsmall
> )) ///
>                                 ylabel(, labsize(vsmall)) legend(off) ///
>                                 ytitle("GJ PC", size(small)) xtitle("Temperat
> ure[C]", size(small)) ///
>                                 title("`city', `country'", size(small)) ///
>                                 subtitle(, size(vsmall)) ///
>                                 graphregion(color(gs16)) nodraw ///
>                                 name(`city', replace)
 69. 
.                 local plotgraph " `plotgraph' `city'"
 70. 
.                 //clean up shop before plotting next response functions
.                 drop yhat_*     se_* lower_* upper_*    
 71.         }               
 72. 
.         **combine cells**
.         graph combine `plotgraph', ycomm rows(1) ///
>                 graphregion(color(gs16) m(zero))  name(`var') ///
>                 title("`stit'") imargin(zero)
 73. }
(1 observation deleted)
note: confidence intervals calculated using Z critical values
(1 observation deleted)
note: confidence intervals calculated using Z critical values
(1 observation deleted)
note: confidence intervals calculated using Z critical values
(1 observation deleted)
note: confidence intervals calculated using Z critical values
(1 observation deleted)
note: confidence intervals calculated using Z critical values
(1 observation deleted)
note: confidence intervals calculated using Z critical values
(1 observation deleted)
note: confidence intervals calculated using Z critical values
(1 observation deleted)
note: confidence intervals calculated using Z critical values

. 
. * Combine plots, and save
. graph combine electricity other_energy, rows(2)

. graph export "$OUTPUT/figures/fig_2A_city_response_functions_2015_and_2099.pd
> f", replace
(file //Users/ruixueli/Downloads/energy_data_release/OUTPUT/figures/fig_2A_city
> _response_functions_2015_and_2099.pdf written in PDF format)

. graph drop _all 

. 
end of do-file
